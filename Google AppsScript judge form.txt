/** GBRSA backend (optimized, header-aligned, TextFinder lookup) â€” COMPETITION-READY */

const SHEET_ID = PropertiesService.getScriptProperties().getProperty('SHEET_ID') || '1jJzY7YPWp2z--NoA9zjegzss4ZJXH4_eTuaePmHe0dg';
const DATA_SHEET = PropertiesService.getScriptProperties().getProperty('DATA_SHEET_NAME') || 'Data';
const RESULT_SHEET = PropertiesService.getScriptProperties().getProperty('RESULT_SHEET_NAME') || 'Result';
const JUDGES_SHEET = "Judges"; // ðŸ”‘ sheet for login

/** --- Utility functions --- **/
function normalizeId(s) {
  return String(s == null ? '' : s).trim();
}
function stripLeadingZeros(s) {
  return normalizeId(s).replace(/^0+/, '');
}
function sameId(a, b) {
  const A = normalizeId(a), B = normalizeId(b);
  return (A === B || stripLeadingZeros(A) === stripLeadingZeros(B));
}

/** --- GET endpoint --- **/
function doGet(e) {
  const cmd = (e.parameter.cmd || '').toLowerCase();

  if (cmd === 'ping') {
    return json({ ok: true, data: { ts: Date.now() }, error: null });
  }

  if (cmd === 'participant') {
    return getParticipant(e); // âœ… delegate to helper
  }

  // Default â†’ serve the UI
  return HtmlService.createTemplateFromFile('judge_form_ui')
    .evaluate()
    .setTitle("GBRSA Judge Form")
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

/** --- Participant lookup helper --- **/
function getParticipant(e) {
  const entryId = normalizeId(e.parameter.entryId);
  if (!entryId) return json({ ok: false, data: null, error: 'Missing entryId' });

  const sh = SpreadsheetApp.openById(SHEET_ID).getSheetByName(DATA_SHEET);
  const values = sh.getDataRange().getValues();

  const row = values.find(r => sameId(r[0], entryId));
  if (!row) return json({ ok: false, data: null, error: 'Not found' });

  // Adjust column indexes to match your sheet
  const names = [row[1], row[2], row[3], row[4]].filter(Boolean);

  return json({
    ok: true,
    data: {
      id: entryId,
      names: names,
      representative: row[5],
      state: row[6]
    },
    error: null
  });
}

/** --- LOGIN helper --- **/
function doLogin(body) {
  const userId = (body.userId || "").trim();
  const password = (body.password || "").trim();

  const sh = SpreadsheetApp.openById(SHEET_ID).getSheetByName(JUDGES_SHEET);
  if (!sh) return { ok: false, data: null, error: "Judges sheet not found" };

  const values = sh.getDataRange().getValues();
  const headers = values[0];
  const userIndex = headers.indexOf("UserID");
  const passIndex = headers.indexOf("Password");

  if (userIndex === -1 || passIndex === -1) {
    return { ok: false, data: null, error: "Judges sheet must have 'UserID' and 'Password' columns" };
  }

  const found = values.slice(1).some(row => {
    return row[userIndex] && row[userIndex].toString().trim() === userId &&
           row[passIndex] && row[passIndex].toString().trim() === password;
  });

  return found
    ? { ok: true, data: { userId: userId }, error: null }
    : { ok: false, data: null, error: "Invalid credentials" };
}

/** --- POST endpoint (save results / login) --- **/
function doPost(e) {
  const lock = LockService.getScriptLock();
  try {
    lock.waitLock(5000);

    let body = {};
    try {
      body = JSON.parse(e.postData && e.postData.contents ? e.postData.contents : '{}');
    } catch (err) {
      return json({ ok: false, data: null, error: "Invalid JSON in request body" });
    }

    if (typeof body !== 'object' || Array.isArray(body)) {
      return json({ ok: false, data: null, error: "Request body must be a JSON object" });
    }

    const cmd = (body.cmd || "").toLowerCase();

    if (cmd === "login") {
      return json(doLogin(body));
    }

    if (cmd === "save") {
      const sh = SpreadsheetApp.openById(SHEET_ID).getSheetByName(RESULT_SHEET);
      if (!sh) return json({ ok: false, data: null, error: `Result sheet '${RESULT_SHEET}' not found` });

      const headers = sh.getRange(1, 1, 1, sh.getLastColumn()).getValues()[0].map(String);

      const row = headers.map(h => {
        const key = h.trim();
        if (key.toLowerCase() === 'timestamp') return new Date();
        if (Object.prototype.hasOwnProperty.call(body, key)) return body[key];
        const foundKey = Object.keys(body).find(k => k.trim().toLowerCase() === key.toLowerCase());
        return foundKey ? body[foundKey] : '';
      });

      sh.appendRow(row);
      return json({ ok: true, data: { saved: true }, error: null });
    }

    return json({ ok: false, data: null, error: "Unknown POST command" });
  } catch (err) {
    return json({ ok: false, data: null, error: String(err) });
  } finally {
    if (lock) lock.releaseLock();
  }
}

/** --- JSON helper --- **/
function json(obj) {
  return ContentService.createTextOutput(JSON.stringify(obj))
    .setMimeType(ContentService.MimeType.JSON);
}
